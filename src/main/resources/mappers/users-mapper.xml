<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="usersMapper"> 
	<update id="updatePwd">
		update users
		set users_pw = #{newPw}
		where users_id = #{usersId} and status = 'Y'
	</update>
	
	<update id="updateInfo">
		update users
		set nickname = #{nickName}, email = #{email}, phone = #{phone}
		where users_id = #{usersId} and status = 'Y'
	</update>
	
	<insert id="insertImage">
		insert into image
		values (seq_image_no.nextval, #{imageDivideNo}, #{imageType}, #{imageOriginalName}, #{imageRenameName}, #{imagePath}, 0)
	</insert>
	
	<update id="updateProfile">
		update users
		set users_selfintro = #{usersSelfIntro}
		where users_no = #{usersNo} and status = 'Y'
	</update>
	
	<select id="selectImage" resultMap="imageResultSet">
		select *
		from image
		where IMAGE_DIVIDE_NO = #{usersNo} and IMAGE_TYPE = 1
	</select>
	
	<resultMap type="Image" id="imageResultSet">
		<id column="IMAGE_NO" property="imageNo"/>
		<result column="IMAGE_DIVIDE_NO" property="imageDivideNo"/>
		<result column="IMAGE_TYPE" property="imageType"/>
		<result column="IMAGE_ORIGINALNAME" property="imageOriginalName"/>
		<result column="IMAGE_RENAMENAME" property="imageRenameName"/>
		<result column="IMAGE_PATH" property="imagePath"/>
		<result column="IMAGE_LEVEL" property="imageLevel"/>
	</resultMap>
	
	<delete id="deleteImage">
		delete from image
		where IMAGE_DIVIDE_NO = #{imageDivideNo} and image_type = '1'
	</delete>
	
	<delete id="deleteImagebase">
		delete from image
		where IMAGE_DIVIDE_NO = #{usersNo} and image_type = '1'
	</delete>
	
	<select id="selectInfo" resultMap="usersResultSet">
		select *
		from users
		where users_no = #{usersNo} and status = 'Y'
	</select>
	
	<resultMap type="Users" id="usersResultSet">
		<id column="USERS_NO" property="usersNo"/>
		<result column="USERS_ID" property="usersId"/>
		<result column="USERS_PW" property="usersPw"/>
		<result column="USERS_NAME" property="usersName"/>
		<result column="NICKNAME" property="nickName"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="ENROLL_DATE" property="enrollDate"/>
		<result column="EXIT_DATE" property="eixtDate"/>
		<result column="STATUS" property="status"/>
		<result column="CHECK_DAY" property="checkDay"/>
		<result column="POINT" property="point"/>
		<result column="IS_ADMIN" property="isAdmin"/>
		<result column="ATTENDANCE_DATE" property="attendanceDate"/>
		<result column="ATTENDANCE_DAY" property="attendanceDay"/>
		<result column="USERS_ADDRESS" property="usersAddress"/>
		<result column="USERS_SELFINTRO" property="usersSelfIntro"/>
	</resultMap>
	
	<update id="deleteInfo">
		update users
		set status = 'N'
		where users_no = #{usersNo} and status = 'Y'
	</update>
	
	<resultMap type="Follow" id="followResultSet">
		<id column="FOLLOW_NO" property="followNo"/>
		<result column="FOLLOWING_USER_NO" property="followingUsersNo"/>
		<result column="FOLLOW_CREATE_DATE" property="followCreateDate"/>
		<result column="USERS_NO" property="usersNo"/>
	</resultMap>
	
	<select id="selectFollowing" resultType="map">
		select follow_no, following_user_no, f.users_no, nickname, image_renamename, social_id, social_profile_img, users_pw, users_id
		from follow f
		     join users u on(u.users_no = following_user_no)
		     left join image on(u.users_no = image_divide_no)
		     left join social_login on (u.users_id = social_id)
		where f.users_no = #{usersNo} AND (image_type = 1 OR image_type IS NULL)
		order by follow_create_date desc
	</select>
	
	<select id="selectFollower" resultType="map">
		select follow_no, following_user_no, f.users_no, nickname, image_renamename, social_id, social_profile_img, users_pw, users_id
		from follow f
		     join users u on(u.users_no = f.users_no)
		     left join image on(u.users_no = image_divide_no)
		     left join social_login on (u.users_id = social_id)
		where f.following_user_no = #{usersNo} AND (image_type = 1 OR image_type IS NULL)
		order by follow_create_date desc
	</select>
	
	<delete id="deleteFollow">
		delete from follow
		where users_no = #{usersNo} and following_user_no = #{followingNo}
	</delete>
	
	<insert id="insertFollow">
		insert into follow
		values(seq_follow_no.nextval, #{followNo}, default, #{usersNo})
	</insert>
	
	<select id="follow" resultType="_int">
		select count(*)
		from follow
		where following_user_no = #{usersNo}
	</select>
	
	<select id="following" resultType="_int">
		select count(*)
		from follow
		where users_no = #{usersNo}
	</select>
	
	<select id="getMyRecipeListCount" resultType="_int">
		select count(*)
		from recipe
		where users_no = #{usersNo} and recipe_status = 'Y'
		<if test="selectTitle != null">
			and recipe_name like '%${selectTitle}%'
		</if>
	</select>
	
	<select id="selectMyRecipe" resultType="map">
		SELECT r.food_no, r.recipe_name, r.recipe_modify_date, r.recipe_count, COUNT(rb.division_no) AS recipeBookCount, COUNT(rl.division_no) AS recipeLikeCount
		FROM recipe r
		LEFT JOIN bookmark rb ON (r.food_no = rb.division_no)
		LEFT JOIN likes rl ON (r.food_no = rl.division_no)
		WHERE r.users_no = #{usersNo} AND r.recipe_status = 'Y'
		<if test="selectTitle != null">
			and recipe_name like '%${selectTitle}%'
		</if>
		GROUP BY r.food_no, r.recipe_name, r.recipe_modify_date, r.recipe_count
		<if test="selectType == 0">
		order by food_no desc
		</if>
		<if test="selectType == 1">
		order by food_no
		</if>
		<if test="selectType == 2">
		order by recipe_count desc
		</if>
		<if test="selectType == 3">
		order by recipeBookCount desc
		</if>
		<if test="selectType == 4">
		order by recipeLikeCount desc
		</if>
	</select>
	
	<resultMap type="Recipe" id="recipeResultSet">
		<id column="food_no" property="foodNo"/>
		<result column="USERS_NO" property="usersNo"/>
		<result column="RECIPE_NAME" property="recipeName"/>
		<result column="CATEGORY_INGREDIENT" property="categoryIngredient"/>
		<result column="CATEGORY_SITUATION" property="categorySituation"/>
		<result column="CATEGORY_TYPE" property="categoryType"/>
		<result column="RECIPE_DIFFICULTY" property="recipeDifficulty"/>
		<result column="RECIPE_TIME" property="recipeTime"/>
		<result column="RECIPE_CONTENT" property="recipeContent"/>
		<result column="RECIPE_COUNT" property="recipeCount"/>
		<result column="RECIPE_CREATE_DATE" property="recipeCreateDate"/>
		<result column="RECIPE_MODIFY_DATE" property="recipeModifyDate"/>
		<result column="RECIPE_STATUS" property="recipeStatus"/>
	</resultMap>
	
	<select id="getBookListCount" resultType="_int">
		select count(*)
		from bookmark b
		     left join menu m on (b.division_no = m.product_no)
		     left join product p on (b.division_no = p.product_no)
		     left join healther h on (p.users_no = h.users_no)
		     left join recipe r on (b.division_no = r.food_no)
		     left join image i on (r.food_no = i.IMAGE_DIVIDE_NO) AND i.image_level = 0
		     left join image im on (m.product_no = im.image_divide_no)
		     left join users u on (u.users_no = r.users_no)
		where b.users_no = #{usersNo}
		      AND (p.product_status = 'Y' OR p.product_status IS NULL)
			  AND (r.recipe_name IS NOT NULL OR m.menu_name IS NOT NULL)
		<if test="selectTitle != null">
			and (recipe_name like '%${selectTitle}%' or menu_name like '%${selectTitle}%')
		</if>
		<if test="selectType == null || selectType == 0">
		order by bookmark_no desc
		</if>
		<if test="selectType == 1">
		order by bookmark_no
		</if>
		<if test="selectType == 2">
			and number_type = 1
		order by bookmark_no desc
		</if>
		<if test="selectType == 3">
			and number_type = 2
		order by bookmark_no desc
		</if>
	</select>
	
	<select id="myBookMarkList" resultType="map">
		select DIVISION_NO, NUMBER_TYPE, i.image_renamename, i.image_level, u.nickname, r.recipe_modify_date, 
		       r.recipe_name, m.menu_name, h.name, p.PRODUCT_MODIFY_DATE, food_no, bookmark_no, p.product_no
		from bookmark b
		     left join menu m on (b.division_no = m.product_no)
		     left join product p on (b.division_no = p.product_no)
		     left join healther h on (p.users_no = h.users_no)
		     left join recipe r on (b.division_no = r.food_no)
		     left join image i on (b.division_no = i.IMAGE_DIVIDE_NO)
		     left join users u on (u.users_no = r.users_no)
		where b.users_no = #{usersNo} and i.image_level = 0 AND (p.product_status = 'Y' OR p.product_status IS NULL)
			  AND (r.recipe_name IS NOT NULL OR m.menu_name IS NOT NULL)
		<if test="selectTitle != null">
			and (recipe_name like '%${selectTitle}%' or menu_name like '%${selectTitle}%')
		</if>
		<if test="selectType == null || selectType == 0">
		order by bookmark_no desc
		</if>
		<if test="selectType == 1">
		order by bookmark_no
		</if>
		<if test="selectType == 2">
			and number_type = 1
		order by bookmark_no desc
		</if>
		<if test="selectType == 3">
			and number_type = 2
		order by bookmark_no desc
		</if>
	</select>
	
	<!-- 좋아요 개수 조회 -->
	<select id="getLikeListCount" resultType="_int">
		select count(*)
		from likes l
		     left join image i on (l.division_no = i.image_divide_no)
	         left join menu m on (l.division_no = m.product_no)
	         left join product p on (l.division_no = p.product_no) and product_status = 'Y'
	         left join healther h on (p.users_no = h.users_no)
	         left join food f on (l.division_no = f.product_no)
	         left join tool t on (p.product_no = t.product_no)
	         left join ingredient g on (l.division_no = g.product_no)
		where l.users_no = #{usersNo} and i.image_level = 0 and i.image_type in (3,4,5,6)
		<if test="selectType == 1">
			and number_type = 1
		</if>
		<if test="selectType == 2">
			and product_type = 2
		</if>
		<if test="selectType == 3">
			and product_type = 1
		</if>
		<if test="selectType == 4">
			and product_type = 3
		</if>
		<if test="selectType == 5">
			and product_type = 4
		</if>
		<if test="selectTitle != null">
			and (menu_name like '%${selectTitle}%' or food_name like '%${selectTitle}%' 
				 or tool_name like '%${selectTitle}%' or ingredient_name like '%${selectTitle}%')
		</if>
		order by like_no desc
	</select>
   
	<!-- 좋아요 조회 -->
	<select id="myLikeList" resultType="map">
        select l.like_no, l.number_type, i.image_renamename, h.name, m.menu_name, p.product_modify_date, f.food_name, 
		       f.food_type, p.product_type, t.tool_name, p.product_price, p.product_no, g.ingredient_name, 
		       i.image_level
		from likes l
		     left join image i on (l.division_no = i.image_divide_no)
             left join menu m on (l.division_no = m.product_no)
             left join product p on (l.division_no = p.product_no) and product_status = 'Y'
             left join healther h on (p.users_no = h.users_no)
             left join food f on (l.division_no = f.product_no) and product_type = 1
             left join tool t on (p.product_no = t.product_no)
             left join ingredient g on (l.division_no = g.product_no)
		where l.users_no = 22 and i.image_level = 0 and i.image_type in (3,4,5,6)
		<if test="selectType == 2">
			and product_type = 2
		</if>
		<if test="selectType == 3">
			and product_type = 1
		</if>
		<if test="selectType == 4">
			and product_type = 3
		</if>
		<if test="selectType == 5">
			and product_type = 4
		</if>
		<if test="selectTitle != null">
			and (menu_name like '%${selectTitle}%' or food_name like '%${selectTitle}%' 
				 or tool_name like '%${selectTitle}%' or ingredient_name like '%${selectTitle}%')
		</if>
		order by like_no desc
	</select>
   
	<!-- 스크랩, 좋아요 삭제 -->
	<delete id="deleteBookMark">
		delete from bookmark
		where bookmark_no = #{bookmarkNo}
	</delete>
	
	<delete id="deleteLike">
		delete from likes
		where like_no = #{likeNo}
	</delete>
	
	<!-- 주문한 리스트 조회  -->
	<select id="selectOrderList" resultMap="OrdersResultSet">
		select * from orders where users_no = #{usersNo} order by order_no desc
	</select>
	
	<select id="orderListCount" resultType="_int">
		select count(*) from orders where users_no = #{usersNo}
	</select>
	
	<resultMap type="Orders" id="OrdersResultSet">
      <id column="ORDER_NO" property="orderNo"/>
      <result column="PRODUCT_NO" property="productNo"/>
      <result column="USERS_NO" property="usersNo"/>
      <result column="PRODUCT_TYPE" property="productType"/>
      <result column="ORDER_COUNT" property="orderCount"/>
      <result column="ORDER_TOTAL_PRICE" property="totalPrice"/>
      <result column="ORDER_DATE" property="orderDate"/>
      <result column="ORDER_STATUS" property="orderStatus"/>
      <result column="ORDER_ADDRESS" property="orderAddress"/>
      <result column="ORDER_DELIVERY_DATE" property="orderDeliveryDate"/>
      <result column="ORDER_STOCK" property="orderStock"/>
      <result column="ORDER_DELIVERY_COMMENT" property="orderDeliveryComment"/>
      <result column="ORDER_INFO" property="orderInfo"/>
      <result column="SHIP_PRICE" property="shipPrice"/>
      <result column="OPTIONS" property="options"/>
   </resultMap>
	
	<select id="selectDetailOrder" resultMap="OrdersResultSet">
		select * from orders where order_no = #{orderNo}
	</select>
	
	<update id="updateAddress">
		update shipping_address 
		set RECIPIENT=#{recipient}, ADDRESS=#{address}, PHONE=#{phone}, SHIPPING_NAME=#{shippingName}
		where SHIPPING_NO = #{shippingNo}
	</update>
	
	<select id="selectPeriodOrders" resultMap="OrdersResultSet">
		<![CDATA[
			SELECT *
			FROM orders
			WHERE TRUNC(ORDER_DATE) >= TO_DATE(#{start}, 'YYYY-MM-DD')
			  AND TRUNC(ORDER_DATE) <= TO_DATE(#{end}, 'YYYY-MM-DD')
			  AND USERS_NO = #{usersNo}
			ORDER BY ORDER_NO DESC
		]]>
	</select>
	
	<select id="orderPeriodCount" resultType="_int">
		<![CDATA[
			SELECT count(*)
			FROM orders
			WHERE TRUNC(ORDER_DATE) >= TO_DATE(#{start}, 'YYYY-MM-DD')
			  AND TRUNC(ORDER_DATE) <= TO_DATE(#{end}, 'YYYY-MM-DD')
			  AND users_no = #{usersNo}
		]]>
	</select>
	
	<select id="getPointCount" resultType="_int">
		SELECT COUNT(*)
		FROM (
		    SELECT point_no, p.users_no, point_type, point_before, point_change, modify_date, 
		    	   NULL AS users_id, NULL AS date1, NULL AS datestr, NULL AS checked, NULL AS title
		    FROM point p
		    WHERE users_no = #{usersNo}
		
		    UNION
		
		    SELECT NULL AS point_no, NULL AS users_no, NULL AS point_type, NULL AS point_before, NULL AS point_change, NULL AS modify_date, 
		    	   a.users_id, date1, datestr, checked, title
		    FROM attendance a
		    LEFT JOIN users u ON a.users_id = u.users_id
		    WHERE u.users_no = #{usersNo})
	</select>
	
	<select id="selectPoint" resultType="map">
		SELECT *
		FROM (
		    SELECT point_no, p.users_no, point_type, point_before, point_change, modify_date, 
		           NULL AS users_id, NULL AS date1, NULL AS datestr, NULL AS checked, NULL AS title, NULL AS point
		    FROM point p
		    WHERE users_no = #{usersNo}
		
		    UNION
		
		    SELECT NULL AS point_no, NULL AS users_no, NULL AS point_type, NULL AS point_before, NULL AS point_change, NULL AS modify_date, 
		           a.users_id, date1, datestr, checked, title, point
		    FROM attendance a
		    LEFT JOIN users u ON a.users_id = u.users_id
		    WHERE u.users_no = #{usersNo})
		ORDER BY COALESCE(modify_date, TO_DATE(checked, 'YYYY-MM-DD HH24:MI:SS')) DESC
	</select>
	
<!-- 	<insert id="deletePoint"> -->
<!-- 		insert into point -->
<!-- 		<if test="before == null"> -->
<!-- 			values(seq_point_no.nextval, #{userNo}, 12, #{point}, #{point}-10, sysdate) -->
<!-- 		</if> -->
<!-- 		<if test="before != null"> -->
<!-- 			values(seq_point_no.nextval, #{userNo}, 12, #{point}, #{point} - (#{change}-#{before}), sysdate) -->
<!-- 		</if> -->
<!-- 	</insert> -->
	
<!-- 	<update id="updatePoint"> -->
<!-- 		update users -->
<!-- 		<if test="before == null"> -->
<!-- 			set point = #{point} - 10 -->
<!-- 		</if> -->
<!-- 		<if test="before != null"> -->
<!-- 			set point = #{point} - (#{change}-#{before}) -->
<!-- 		</if> -->
<!-- 		where users_no = #{userNo} -->
<!-- 	</update> -->

	<select id="getReviewCount" resultType="_int">
		select count(*)
		from review
		     left join recipe on (product_no = food_no)
		     left join menu using (product_no)
		     left join product using (product_no)
		     left join tool using (product_no)
		     left join food using (product_no)
		     left join ingredient using (product_no)
		where review_writer in (#{usersId}, #{nickName}) and order_no != -1 and review_status = 'Y'
	</select>
	
	<select id="selectReview" resultType="map">
		select r.product_no, order_no, review_no, review_content, review_score, review_status, review_date, review_writer,
		       recipe_name, menu_name, tool_name, food_name, ingredient_name, product_type, food_type
		from review r
		     left join recipe c on (product_no = food_no)
		     left join menu m on (r.product_no = m.product_no)
		     left join product p on (r.product_no = p.product_no)
		     left join tool t on (r.product_no = t.product_no)
		     left join food f on (r.product_no = f.product_no)
		     left join ingredient i on (r.product_no = i.product_no)
		where review_writer in (#{usersId}, #{nickName}) and order_no != -1 and review_status = 'Y'
		order by review_date desc
	</select>
	
</mapper>